# Azure DevOps Pipeline for Frontend Application
# Build and push Docker image to ACR

name: Frontend-Build-$(Date:yyyyMMdd)-$(Rev:r)

trigger:
  branches:
    include:
    - main
    - develop
  paths:
    exclude:
    - README.md
    - docs/*
    - '*.md'

variables:
  # Version configuration
  majorVersion: 1
  minorVersion: 0
  patchVersion: '$(Build.BuildId)'
  branchName: '$(Build.SourceBranchName)'
  
  # Azure Container Registry
  containerRegistry: 'acrServiceConnection'  # Update this to match your ACR service connection name
  imageRepository: 'frontend'
  dockerfilePath: 'Dockerfile'

stages:
- stage: Build
  displayName: 'Build and Push Frontend'
  jobs:
  - job: BuildFrontend
    displayName: 'Build Frontend Application'
    pool:
      name: 'Default'  # Use Default agent pool (or your custom pool name)
      demands:
      - agent.name -equals THINHPC  # Optional: specify exact agent
    steps:
    - checkout: self
      displayName: 'Checkout frontend source'
    
    - task: PowerShell@2
      displayName: 'Set Version Tags'
      inputs:
        targetType: 'inline'
        script: |
          $branchName = "$(Build.SourceBranchName)"
          $versionedTag = "v$(majorVersion).$(minorVersion).$(patchVersion)"
          $latestTag = ""
          
          Write-Host "Branch: $branchName"
          Write-Host "Versioned tag: $versionedTag"
          
          # Set tags based on branch
          if ($branchName -eq "main") {
            $latestTag = "latest"
            Write-Host "##vso[task.setvariable variable=versionedTag]$versionedTag"
            Write-Host "##vso[task.setvariable variable=latestTag]$latestTag"
            Write-Host "Tags will be: $versionedTag, $latestTag"
          } elseif ($branchName -eq "develop") {
            $devTag = "dev-v$(majorVersion).$(minorVersion).$(patchVersion)"
            Write-Host "##vso[task.setvariable variable=versionedTag]$versionedTag"
            Write-Host "##vso[task.setvariable variable=latestTag]$devTag"
            Write-Host "Tags will be: $versionedTag, $devTag"
          } else {
            Write-Host "##vso[task.setvariable variable=versionedTag]$versionedTag"
            Write-Host "##vso[task.setvariable variable=latestTag]"
            Write-Host "Tags will be: $versionedTag"
          }
          
    - task: NodeTool@0
      displayName: 'Setup Node.js'
      inputs:
        versionSpec: '18.x'
        
    - task: PowerShell@2
      displayName: 'Install dependencies'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Installing dependencies..."
          npm ci
        workingDirectory: '$(Build.SourcesDirectory)'
        
    - task: PowerShell@2
      displayName: 'Run tests'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Running tests..."
          npm run test -- --watchAll=false
        workingDirectory: '$(Build.SourcesDirectory)'
      continueOnError: true
      
    - task: PowerShell@2
      displayName: 'Build React app'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Building React application..."
          npm run build
        workingDirectory: '$(Build.SourcesDirectory)'
      
    - task: PowerShell@2
      displayName: 'Security audit'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Running security audit..."
          npm audit --audit-level high
        workingDirectory: '$(Build.SourcesDirectory)'
      continueOnError: true
      
    - task: Docker@2
      displayName: 'Build Docker image'
      inputs:
        containerRegistry: '$(containerRegistry)'
        repository: '$(imageRepository)'
        command: 'build'
        Dockerfile: '$(dockerfilePath)'
        buildContext: '$(Build.SourcesDirectory)'
        tags: |
          $(versionedTag)
          $(latestTag)
          
    - task: Docker@2
      displayName: 'Push image to ACR'
      inputs:
        containerRegistry: '$(containerRegistry)'
        repository: '$(imageRepository)'
        command: 'push'
        tags: |
          $(versionedTag)
          $(latestTag)
          
    - task: PowerShell@2
      displayName: 'Build Summary'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "‚úÖ Frontend build completed successfully!"
          Write-Host "üì¶ Images created:"
          Write-Host "   - $(imageRepository):$(versionedTag)"
          if ("$(latestTag)" -ne "") {
            Write-Host "   - $(imageRepository):$(latestTag)"
          }
          Write-Host "üîó Registry: ACR"
          Write-Host "üåø Branch: $(branchName)"
          Write-Host "üè∑Ô∏è Version: $(majorVersion).$(minorVersion).$(patchVersion)"
