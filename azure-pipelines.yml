# Azure DevOps Pipeline for Frontend Application
# Build and push Docker image to ACR

name: Frontend-Build-$(Date:yyyyMMdd)-$(Rev:r)

trigger:
  branches:
    include:
    - main
    - develop
  paths:
    exclude:
    - README.md
    - docs/*
    - '*.md'

variables:
  # Version configuration
  majorVersion: 1
  minorVersion: 0
  patchVersion: '$(Build.BuildId)'
  branchName: '$(Build.SourceBranchName)'
  
  # Azure Container Registry
  containerRegistry: 'acrServiceConnection'  # Update this to match your ACR service connection name
  imageRepository: 'frontend'
  dockerfilePath: 'Dockerfile'

stages:
- stage: Build
  displayName: 'Build and Push Frontend'
  jobs:
  - job: BuildFrontend
    displayName: 'Build Frontend Application'
    pool:
      name: 'Default'  # Use Default agent pool (or your custom pool name)
      demands:
      - agent.name -equals THINHPC  # Optional: specify exact agent
    steps:
    - checkout: self
      displayName: 'Checkout frontend source'
    
    - task: PowerShell@2
      displayName: 'Set Version Tags'
      inputs:
        targetType: 'inline'
        script: |
          $branchName = "$(Build.SourceBranchName)"
          $versionedTag = "v$(majorVersion).$(minorVersion).$(patchVersion)"
          $latestTag = ""
          
          Write-Host "Branch: $branchName"
          Write-Host "Versioned tag: $versionedTag"
          
          # Set tags based on branch
          if ($branchName -eq "main") {
            $latestTag = "latest"
            Write-Host "##vso[task.setvariable variable=versionedTag]$versionedTag"
            Write-Host "##vso[task.setvariable variable=latestTag]$latestTag"
            Write-Host "Tags will be: $versionedTag, $latestTag"
          } elseif ($branchName -eq "develop") {
            $devTag = "dev-v$(majorVersion).$(minorVersion).$(patchVersion)"
            Write-Host "##vso[task.setvariable variable=versionedTag]$versionedTag"
            Write-Host "##vso[task.setvariable variable=latestTag]$devTag"
            Write-Host "Tags will be: $versionedTag, $devTag"
          } else {
            Write-Host "##vso[task.setvariable variable=versionedTag]$versionedTag"
            Write-Host "##vso[task.setvariable variable=latestTag]"
            Write-Host "Tags will be: $versionedTag"
          }
          
    - task: NodeTool@0
      displayName: 'Setup Node.js'
      inputs:
        versionSpec: '18.x'
        
    - task: PowerShell@2
      displayName: '[MOCK] Install dependencies and run tests'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "[MOCK] Installing dependencies..."
          Write-Host "✅ Dependencies would be installed via: npm ci"
          Write-Host ""
          Write-Host "[MOCK] Running tests..."
          Write-Host "✅ Frontend tests would run via: npm run test -- --watchAll=false"
          Write-Host "   - Unit tests: ✅ Passed"
          Write-Host "   - Component tests: ✅ Passed"
          Write-Host ""
          Write-Host "[MOCK] Building React application..."
          Write-Host "✅ React build would run via: npm run build"
          Write-Host "   - Build artifacts created successfully"
          Write-Host ""
          Write-Host "[MOCK] Running security audit..."
          Write-Host "✅ Security audit would run via: npm audit --audit-level high"
          Write-Host "   - No vulnerabilities found"
        workingDirectory: '$(Build.SourcesDirectory)'
      
    - task: Docker@2
      displayName: 'Build Docker image'
      inputs:
        containerRegistry: '$(containerRegistry)'
        repository: '$(imageRepository)'
        command: 'build'
        Dockerfile: '$(dockerfilePath)'
        buildContext: '$(Build.SourcesDirectory)'
        tags: |
          $(versionedTag)
          $(latestTag)

    - task: PowerShell@2
      displayName: 'Install Trivy'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Installing Trivy..."
          # Download and install Trivy
          $trivyVersion = "0.46.0"
          $downloadUrl = "https://github.com/aquasecurity/trivy/releases/download/v$trivyVersion/trivy_$($trivyVersion)_Windows-64bit.zip"
          $tempPath = "$env:TEMP\trivy.zip"
          $extractPath = "$env:TEMP\trivy"
          
          try {
            Invoke-WebRequest -Uri $downloadUrl -OutFile $tempPath
            Expand-Archive -Path $tempPath -DestinationPath $extractPath -Force
            $trivyPath = "$extractPath\trivy.exe"
            
            if (Test-Path $trivyPath) {
              Write-Host "✅ Trivy installed successfully"
              Write-Host "##vso[task.setvariable variable=trivyPath]$trivyPath"
            } else {
              Write-Host "❌ Failed to install Trivy"
              exit 1
            }
          } catch {
            Write-Host "❌ Error installing Trivy: $_"
            exit 1
          }

    - task: PowerShell@2
      displayName: 'Security Scan with Trivy'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "🔍 Running Trivy security scan on frontend image..."
          $imageName = "$(imageRepository):$(versionedTag)"
          
          # Run Trivy scan
          $trivyOutput = & "$(trivyPath)" image --format json --severity CRITICAL,HIGH,MEDIUM,LOW $imageName 2>&1
          $exitCode = $LASTEXITCODE
          
          Write-Host "Trivy scan completed with exit code: $exitCode"
          
          # Parse and display results
          try {
            $results = $trivyOutput | ConvertFrom-Json
            $criticalCount = 0
            $highCount = 0
            $mediumCount = 0
            $lowCount = 0
            
            foreach ($result in $results.Results) {
              if ($result.Vulnerabilities) {
                foreach ($vuln in $result.Vulnerabilities) {
                  switch ($vuln.Severity) {
                    "CRITICAL" { $criticalCount++ }
                    "HIGH" { $highCount++ }
                    "MEDIUM" { $mediumCount++ }
                    "LOW" { $lowCount++ }
                  }
                }
              }
            }
            
            Write-Host ""
            Write-Host "🛡️ Security Scan Summary:"
            Write-Host "   🔴 Critical: $criticalCount"
            Write-Host "   🟠 High: $highCount"
            Write-Host "   🟡 Medium: $mediumCount"
            Write-Host "   🟢 Low: $lowCount"
            Write-Host ""
            
            if ($criticalCount -gt 0) {
              Write-Host "⚠️ WARNING: $criticalCount critical vulnerabilities found in frontend image!"
              Write-Host "🔍 Please review and address critical vulnerabilities when possible."
            } else {
              Write-Host "✅ No critical vulnerabilities found in frontend image."
            }
            
            # Generate detailed report for critical vulnerabilities
            if ($criticalCount -gt 0) {
              Write-Host ""
              Write-Host "📋 Critical Vulnerabilities Details:"
              foreach ($result in $results.Results) {
                if ($result.Vulnerabilities) {
                  foreach ($vuln in $result.Vulnerabilities) {
                    if ($vuln.Severity -eq "CRITICAL") {
                      Write-Host "   - $($vuln.VulnerabilityID): $($vuln.Title)"
                      Write-Host "     Package: $($vuln.PkgName) ($($vuln.InstalledVersion))"
                      if ($vuln.FixedVersion) {
                        Write-Host "     Fix Available: $($vuln.FixedVersion)"
                      }
                      Write-Host ""
                    }
                  }
                }
              }
            }
            
          } catch {
            Write-Host "⚠️ Warning: Could not parse Trivy output, but scan completed."
            Write-Host "Raw output: $trivyOutput"
          }
          
          # Always continue - don't fail the pipeline
          Write-Host "✅ Security scan completed. Pipeline will continue regardless of findings."
      continueOnError: true
          
    - task: Docker@2
      displayName: 'Push image to ACR'
      inputs:
        containerRegistry: '$(containerRegistry)'
        repository: '$(imageRepository)'
        command: 'push'
        tags: |
          $(versionedTag)
          $(latestTag)
          
    - task: PowerShell@2
      displayName: 'Build Summary'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "✅ Frontend build completed successfully!"
          Write-Host "📦 Images created:"
          Write-Host "   - $(imageRepository):$(versionedTag)"
          if ("$(latestTag)" -ne "") {
            Write-Host "   - $(imageRepository):$(latestTag)"
          }
          Write-Host "🔗 Registry: ACR"
          Write-Host "🌿 Branch: $(branchName)"
          Write-Host "🏷️ Version: $(majorVersion).$(minorVersion).$(patchVersion)"
